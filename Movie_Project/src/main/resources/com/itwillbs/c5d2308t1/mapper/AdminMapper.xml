<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.c5d2308t1.mapper.AdminMapper">

<!-- =============== 영화 관리 페이지 ==================== -->
	<!-- 영화 DB 등록 -->
	<insert id="insertMovies">
		INSERT INTO movies
		VALUES(
			#{movie_id}
			, #{movie_title}
			, #{movie_nation}
			, #{movie_prdtYear}
			, #{movie_director}
			, #{movie_actor}
			, #{movie_genre}
			, #{movie_rating}
			, #{movie_plot}
			, #{movie_release_date}
			, #{movie_close_date}
			, #{movie_runtime}
			, #{movie_poster}
			, #{movie_still1}
			, #{movie_still2}
			, #{movie_still3}
			, #{movie_trailer}
			, #{movie_audience}
			, #{movie_status}
		)
	</insert>
	<!-- 영화 DB 수정 -->
	<update id="updateMovies">
		UPDATE movies
		SET
			movie_title = #{movie_title}
			, movie_nation = #{movie_nation}
			, movie_prdtYear = #{movie_prdtYear}
			, movie_director = #{movie_director}
			, movie_actor = #{movie_actor}
			, movie_genre = #{movie_genre}
			, movie_rating = #{movie_rating}
			, movie_plot = #{movie_plot}
			, movie_release_date = #{movie_release_date}
			, movie_close_date = #{movie_close_date}
			, movie_runtime = #{movie_runtime}
			, movie_poster = #{movie_poster}
			, movie_still1 = #{movie_still1}
			, movie_still2 = #{movie_still2}
			, movie_still3 = #{movie_still3}
			, movie_trailer = #{movie_trailer}
			, movie_audience = #{movie_audience}
			, movie_status = #{movie_status}
		WHERE
			movie_id = #{movie_id}
	</update>
	
	<!-- 영화 DB 삭제 -->
	<delete id="deleteMovies">
		DELETE FROM movies
		WHERE movie_id = #{movie_id}
	</delete>
	
	<!-- 하나의 영화 정보 조회 -->
	<select id="selectMovie">
		SELECT *
		FROM movies
		WHERE movie_id = #{movie_id}
	</select>

	<!-- 페이징 처리를 위한 게시물 개수 조회 작업 -->
	<select id="selectMovieListCount" resultType="int">
		SELECT COUNT(*)
		FROM movies
		<if test="!searchKeyword.equals('')">
			WHERE
				movie_title LIKE '%${searchKeyword}%'
		</if>
	</select>
	
	<!-- 한 페이지에 표시할 영화 목록 조회 작업 -->
	<select id="selectMovieList" resultType="movies">
		SELECT *
		FROM movies
		<if test="!searchKeyword.equals('')">
			WHERE
				movie_title LIKE '%${searchKeyword}%'
		</if>
		ORDER BY movie_release_date DESC
		LIMIT #{page.startRow}, #{page.listLimit}
	
	</select>
	

<!-- ================ 분실물 관리 페이지 ==================== -->
	<!-- 앨리어스로 com.itwillbs.c5d2308t1.vo.CsVO 등록 -->
	<!-- 	분실문 문의 관리 게시판 조회 작업 -->
<!-- 			조회 레코드 갯수 제한(LIMIT 절 사용) -->
<!-- 			정수 파라미터 2개(startRow, limit) : 시작행 번호부터 지정한 갯수만큼 조회 -->
	<select id="selectLostnfoundList" resultType="hashmap">
		SELECT *
		FROM cs JOIN theaters
		ON cs.theater_id = theaters.theater_id
		WHERE cs_type = '분실물문의'
		<if test="!searchValue.equals('')">
			AND (cs_subject LIKE '%${searchValue}%' 
			OR theaters.theater_name LIKE '%${searchValue}%')
		</if>
		ORDER BY cs_id DESC
		LIMIT #{page.startRow}, #{page.listLimit}
	</select>
	
<!-- 	분실문 문의 관리 게시판 상세 조회 작업 -->
	<select id="selectLostnfound" resultType="hashmap">
		SELECT *
		FROM cs
		JOIN theaters
		ON cs.theater_id = theaters.theater_id
		WHERE cs_type = '분실물문의'
		AND cs_id = #{cs_id}
	</select>
<!-- 	분실물 문의 관리 게시판 답변 작성 -->
	<update id="updateLnfReply">
		UPDATE cs
		SET cs_reply = #{cs_reply}
		WHERE cs_id = #{cs_id}
	</update>
	
<!-- 	분실물 문의 관리 게시판 답변 삭제 -->
	<update id="updateLnfDlt">
		UPDATE cs
		SET cs_reply = ''
		WHERE cs_id = #{cs_id}
	</update>
	
<!-- 	분실물 페이징 처리를 위한 게시물 개수 조회 -->	
	<select id="selectLostnfoundListCount" resultType="int">
		SELECT COUNT(*)
		FROM cs JOIN theaters
		ON cs.theater_id = theaters.theater_id
		WHERE 
			cs_type = '분실물문의'
		<if test="!searchValue.equals('')">
			AND (cs_subject LIKE '%${searchValue}%' 
			OR theaters.theater_name LIKE '%${searchValue}%')
		</if>
	</select>
	
	<!-- ================ 회원 관리 페이지 ==================== -->
	
	<!-- 회원 관리 게시판 회원 수 조회 -->
	<select id="selectMemberListCount" resultType="int">
		SELECT COUNT(*)
		FROM members
		<if test="!searchKeyword.equals('')">
			WHERE
			<choose>
				<when test="searchType.equals('member')">
					member_id LIKE #{searchKeyword}
				</when>
				<when test="searchType.equals('name')">
					member_name LIKE '%${searchKeyword}%'
				</when>
				<otherwise>
					1=1
				</otherwise>
			</choose>
		</if>
	</select>
	<!-- 한 페이지에 표시할 회원 수 조회 -->
	<select id="selectMemberList" resultType="member">
		SELECT *
		FROM members
		<if test="!searchKeyword.equals('')">
			WHERE
			<choose>
				<when test="searchType.equals('member')">
					member_id LIKE #{searchKeyword}
				</when>
				<when test="searchType.equals('name')">
					member_name LIKE '%${searchKeyword}%'
				</when>
			</choose>
		</if>
		ORDER BY member_date DESC
		LIMIT #{page.startRow}, #{page.listLimit}
	</select>
	<!-- 회원 한명의 정보 조회 -->
	<select id="selectMember" resultType="member">
		SELECT *
		FROM members
		WHERE member_id = #{member_id}
	</select>
	<!-- 회원 정보 수정 및 탈퇴 처리 -->
	<update id="updatememberModOrDlt">
	UPDATE members
	SET
		member_name = #{member.member_name}
		<if test="newPasswd != null and !newPasswd.equals('')">
			, member_passwd = #{newPasswd} -- 새 패스워드가 존재할 경우 기존 패스워드 변경
		</if>
		, member_birth = #{member.member_birth}
		, member_phone = #{member.member_phone}
		, member_email = #{member.member_email}
		, member_status = #{member.member_status}
	WHERE
		member_id = #{member.member_id}
	
	</update>
	
	
	<!-- ============ 자주묻는질문관리, 공지사항관리 게시판 ================= -->
	<!-- 자주묻는질문 출력 및 페이지번호 출력, 검색 -->	
	<select id="selectFaqList" resultType="hashmap">
		SELECT * 
		FROM cs 
		WHERE cs.cs_type = '자주묻는질문'
		<if test="searchValue != ''">
			AND (cs.cs_subject LIKE '%${searchValue}%'
			OR cs.cs_type_detail LIKE '%${searchValue}%')
		</if>
		LIMIT #{startRow}, #{listLimit}
	</select>
	
	<!-- 자주묻는질문 목록 갯수 세기 -->
	<select id="selectFaqCount" resultType="int">
		SELECT COUNT(*) 
		FROM cs 
		WHERE cs.cs_type = '자주묻는질문'
		<if test="searchValue != ''">
			AND (cs.cs_subject LIKE '%${searchValue}%'
			OR cs.cs_type_detail LIKE '%${searchValue}%')
		</if>
	</select>	
	
	<!-- 자주묻는질문 공지사항 출력 및 페이지번호 출력, 검색 -->	
	<select id="selectNoticeList" resultType="hashmap">
		SELECT * 
		FROM cs 
		LEFT OUTER JOIN theaters
		ON cs.theater_id = theaters.theater_id
		WHERE cs.cs_type = '공지사항'
		<if test="searchValue != ''">
			AND (cs.cs_subject LIKE '%${searchValue}%'
			OR theaters.theater_name LIKE '%${searchValue}%')
		</if>
		ORDER BY cs_date DESC
		LIMIT #{startRow}, #{listLimit}
	</select>
	
	<!-- 관리자페이지 게시판별 목록 갯수 세기 -->
	<select id="selectNoticeCount" resultType="int">
		SELECT COUNT(*) 
		FROM cs 
		LEFT OUTER JOIN theaters
		ON cs.theater_id = theaters.theater_id
		WHERE cs.cs_type = '공지사항'
		<if test="searchValue != ''">
			AND (cs.cs_subject LIKE '%${searchValue}%'
			OR theaters.theater_name LIKE '%${searchValue}%')
		</if>
	</select>	
	
	<!-- 관리자페이지 자주묻는질문 상세페이지 보기 -->
	<select id="selectFaqDetailPage" resultType="hashmap">
		SELECT *
		FROM cs
		WHERE cs_type = #{cs_type} 
			AND cs_type_list_num = #{cs_type_list_num} 
	</select>
	
	<!-- 관리자페이지 게시글 등록 -->
	<insert id="insertBoard">
		<!-- cs_type_list_num 계산하여 넣기 -->
		<selectKey keyProperty="cs_type_list_num" resultType="int" order="BEFORE">
			SELECT MAX(cs_type_list_num)
			FROM cs
			WHERE cs_type = #{cs_type}
		</selectKey>
		INSERT INTO cs
		VALUES (
			null
			, #{cs_subject}
			, #{cs_content}
			, now()
			, #{cs_type}
			, #{cs_type_detail}
			, #{cs_file}
			, null
			, #{cs_type_list_num} + 1
			, null
			, #{member_id}
			<choose>
				<when test="theater_id != 0">
					, #{theater_id}
				</when>
				<otherwise>
					, theater_id = null		
				</otherwise>
			</choose>
		)		
	</insert>
	
	<!-- 관리자페이지 게시글 수정 -->
	<update id="updateBoard">
		UPDATE cs
			SET
				<choose>
					<when test="theater_id != null">
						theater_id = #{theater_id}
					</when>
					<otherwise>
						theater_id = null		
					</otherwise>
				</choose>
				, cs_subject = #{cs_subject}
				, cs_content = #{cs_content}
				, cs_type_detail = #{cs_type_detail}
				, cs_file = #{cs_file}
			WHERE cs_type = #{cs_type}
				AND cs_type_list_num = #{cs_type_list_num}
	</update>
	
	<!-- 관리자페이지 공지사항 상세페이지 보기 -->
	<select id="selectNoticeDetailPage" resultType="hashmap">
		SELECT *
		FROM cs
		LEFT OUTER JOIN theaters
		ON cs.theater_id = theaters.theater_id
		WHERE cs_type = #{cs_type} 
			AND cs_type_list_num = #{cs_type_list_num} 
	</select>
	
	<delete id="deleteBoard">
		DELETE FROM cs
		WHERE cs_type = #{cs_type} 
			AND cs_type_list_num = #{cs_type_list_num} 
	</delete>
	
	
<!-- *************** 1대1문의 관리 게시판 작업 ************* -->
<!-- 	1대1문의 관리 게시판 조회 -->
<!-- 			조회 레코드 갯수 제한(LIMIT 절 사용) -->
<!-- 			정수 파라미터 2개(startRow, limit) : 시작행 번호부터 지정한 갯수만큼 조회 -->
	<select id="selectOneOnOneList" resultType="cs">
		SELECT *
		FROM cs
		WHERE cs_type = '1대1문의'
		ORDER BY cs_id DESC
 		LIMIT #{startRow}, #{listLimit}
	</select>
	
<!-- 	1대1문의 페이징 처리를 위한 게시물 개수 조회 -->	
	<select id="selectOneOnOneListCount" resultType="int">
		SELECT COUNT(*)
		FROM cs
		WHERE cs_type= '1대1문의'
	</select>
	
<!-- 	1대1 문의 관리 게시판 상세 조회 -->
	<select id="selectOneOnOne" resultType="hashmap">
		SELECT *
		FROM cs
		LEFT OUTER JOIN theaters
		ON cs.theater_id = theaters.theater_id
		WHERE cs_type = '1대1문의'
		AND cs_id = #{cs_id}
	</select>
	
<!--  1대1 문의 답변 등록, 수정 -->
	<update id="updateOneOnOneReply">
		UPDATE cs
		SET cs_reply = #{cs_reply}
		WHERE cs_id = #{cs_id}
	</update>	

<!-- 1대1 문의 답변 삭제 -->
	<update id="deleteOneOnOneReply">
		UPDATE cs
		SET cs_reply = ''
		WHERE cs_id = #{cs_id}
	</update>

<!-- *************** 상영스케쥴 관리페이지 작업 ************* -->
<!-- 1) 상영스케쥴 메인 페이지 -->
<!-- 상영스케쥴 메인 페이지 기본 정보 조회-->
	<select id="selectMainScheduleInfo" resultType="hashmap">
		SELECT t.theater_name, r.room_name, m.movie_title, p.play_start_time, p.play_end_time
		FROM plays p
		JOIN rooms r
		ON p.room_id = r.room_id
		JOIN theaters t
		ON r.theater_id = t.theater_id
		JOIN movies m
		ON p.movie_id = m.movie_id
		WHERE t.theater_id = 1
			AND p.play_date = curdate()
	</select>
	
<!-- 상영스케쥴 메인페이지 상영일정 조회 -->	
	<select id="selectScheduleInfo" resultType="hashmap">
		SELECT r.room_name, m.movie_title, p.play_start_time
		FROM plays p
		JOIN rooms r
		ON p.room_id = r.room_id
		JOIN theaters t
		ON r.theater_id = t.theater_id
		JOIN movies m
		ON p.movie_id = m.movie_id
		WHERE t.theater_id = #{theater_id}
			AND p.play_date = #{play_date}
	</select>

<!-- 2) 상영스케쥴 관리 페이지 -->
	<!-- 기존 상영 일정 조회 -->
	<select id="selectPlayListAll" resultType="hashmap">
		SELECT *
		FROM plays JOIN movies
		ON plays.movie_id = movies.movie_id 
		JOIN rooms
		ON plays.room_id = rooms.room_id
		JOIN theaters
		ON rooms.theater_id = theaters.theater_id
		ORDER BY play_date DESC, play_start_time DESC, theaters.theater_id DESC, rooms.room_id ASC
	</select>
	
	<!-- 선택한 지점명에 따른 상영관 조회 ajax -->
	<select id="selectRoom" resultType="hashmap">
		SELECT room_id, room_name
		FROM rooms
		WHERE theater_id = #{theater_id}
	</select>
	
	<!-- 상영중인 영화 조회 ajax -->
	<select id="selectPlayingMovie" resultType="hashmap">
		SELECT *
		FROM movies
		WHERE movie_status = 1
	</select>
	
	<!-- 영화 정보 조회 ajax -->
	<select id="selectMovieInfo" resultType="hashmap">
		SELECT *
		FROM movies
		WHERE movie_id = #{movie_id}
	</select>
	
	<select id="selectPlayTimeInfo" resultType="hashmap">
		SELECT *
		FROM plays
		WHERE 
			room_id = #{room_id}
			AND play_date = #{play_date}
	</select>
	
	<!-- 상영 일정 등록 -->
	<insert id="insertPlay">
		INSERT INTO plays
		VALUES (
			null
			, #{play_date}
			, 0
			, #{play_start_time}
			, #{play_end_time}
			, #{room_id}
			, #{movie_id}
		)
	</insert>
	
	<!-- 상영 일정 삭제 -->
	<delete id="deletePlay">
		DELETE FROM plays
		WHERE play_id = #{play_id}
	</delete>

	<!-- 상영 일정 수정 -->
	<update id="updateSchedule">
		UPDATE plays
		SET 
			play_date = #{play_date}
			, play_start_time = #{play_start_time}
			, play_end_time = #{play_end_time}
			, room_id = #{room_id}
			, movie_id = #{movie_id}
		WHERE play_id = #{play_id}
	</update>

	<!-- 리뷰 조회 -->
	<select id="selectReviewList" resultType="com.itwillbs.c5d2308t1.vo.ReviewsVO">
		SELECT m.movie_title, r.review_rating, r.member_id, r.review_content 
		FROM reviews r JOIN movies m
		ON r.movie_id = m.movie_id 
	</select>

	
	<!-- 관리자 리뷰삭제 -->
	<delete id="deleteReview">
		FROM reviews
		WHERE member_id = #{member_id}
	</delete>
	
<!-- ============================관리자 예매내역 조회 시작=============================== -->	
	<!-- 페이징 처리를 위한 게시물 개수 조회 작업 -->
	<select id="selectReserveListCount" resultType="int">
		SELECT COUNT(*)
		FROM resView
		<if test="!searchKeyword.equals('')">
			WHERE
				member_id LIKE '%${searchKeyword}%'
		</if>
	</select>
	
	<!-- 한 페이지에 표시할 예매 목록 조회 작업 -->
	<select id="selectReserveList" resultType="map">
		SELECT *
		FROM resView
		<if test="!searchKeyword.equals('')">
			WHERE
				member_id LIKE '%${searchKeyword}%'
		</if>
		ORDER BY payment_datetime DESC
		LIMIT #{page.startRow}, #{page.listLimit}
	</select>
<!-- ============================관리자 예매내역 조회 끝=============================== -->	
</mapper>